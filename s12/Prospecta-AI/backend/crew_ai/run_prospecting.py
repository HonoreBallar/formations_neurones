import subprocess
import time
from datetime import datetime
import re
import argparse
import logging
import os
import sys

# Setup basic logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def run_crew(report_file: str):
    """
    Runs the crewai crew using run_agent.py and saves the output to a report file.
    """
    try:
        logging.info("Starting crewai process...")
        # We execute run_agent.py and capture its output.
        # Using sys.executable ensures we use the same python interpreter.
        result = subprocess.run(
            [sys.executable, "run_agent.py"],
            check=True,
            capture_output=True,
            text=True,
            encoding='utf-8'
        )

        # Write the captured output to the report file
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(result.stdout)

        logging.info(f"Crewai process finished successfully. Report saved to {report_file}.")
        if result.stderr:
            logging.warning(f"Stderr from crewai process:\n{result.stderr}")
    except FileNotFoundError:
        logging.error(f"The python interpreter '{sys.executable}' was not found or 'run_agent.py' is not in the path.")
        raise

def extract_prospect_info(report_content):
    """Extracts prospect information from the report."""
    # This more robust regex captures the prospect list until the next H2 heading or end of file.
    # It also makes the "2." optional and more flexible.
    match = re.search(r"##\s*(?:\d+\.\s*)?Liste (?:Complète des )?Prospects Identifiés\s*\n(.*?)(?=\n##\s|\Z)", report_content, re.DOTALL | re.IGNORECASE)
    if match:
        return match.group(1).strip()
    logging.warning("Could not find the prospect list in the report.")
    return None

def main(args):
    """Main function to run the prospecting loop."""
    # Initialize the prospects list file
    with open(args.output_file, "w", encoding="utf-8") as f:
        f.write("# Liste des Prospects\n\n")
    logging.info(f"Initialized prospect list file at {args.output_file}")

    prospects_gathered = 0
    for i in range(args.iterations):
        logging.info(f"--- Running iteration {i+1}/{args.iterations} ---")
        
        try:
            run_crew(args.report_file)
        except (subprocess.CalledProcessError, FileNotFoundError):
            logging.error("Skipping iteration due to crew execution failure.")
            logging.info(f"Waiting for {args.delay} seconds before the next run...")
            time.sleep(args.delay)
            continue
        
        try:
            with open(args.report_file, "r", encoding="utf-8") as f:
                report_content = f.read()
            
            logging.info(f"--- Content of {args.report_file} ---")
            logging.info(report_content)
            logging.info("--------------------------")
            
            prospect_info = extract_prospect_info(report_content)
            
            if prospect_info:
                prospects_gathered += 1
                with open(args.output_file, "a", encoding="utf-8") as f:
                    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    f.write(f"## Prospect {prospects_gathered} - Ajouté le {timestamp}\n\n")
                    f.write(prospect_info)
                    f.write("\n\n---\n\n")
                logging.info(f"Prospect {prospects_gathered} added to {args.output_file}")
            else:
                logging.warning(f"Could not extract prospect information from {args.report_file}")

        except FileNotFoundError:
            logging.warning(f"{args.report_file} not found. Skipping this iteration.")
        finally:
            # Clean up the report file to avoid using stale data
            if os.path.exists(args.report_file):
                os.remove(args.report_file)
                logging.info(f"Removed processed report file: {args.report_file}")
            
        logging.info(f"Waiting for {args.delay} seconds before the next run...")
        time.sleep(args.delay)

    logging.info(f"--- Prospecting complete. {prospects_gathered} prospects generated in {args.iterations} iterations. ---")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run the prospecting crew in a loop to gather prospects.")
    parser.add_argument('-i', '--iterations', type=int, default=50, help='Number of times to run the crew.')
    parser.add_argument('-d', '--delay', type=int, default=60, help='Delay in seconds between runs.')
    parser.add_argument('-r', '--report-file', type=str, default='report.md', help='The report file generated by the crew.')
    parser.add_argument('-o', '--output-file', type=str, default='prospects_list.md', help='The file to aggregate prospects into.')
    
    args = parser.parse_args()
    main(args)
